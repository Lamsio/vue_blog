(window.webpackJsonp=window.webpackJsonp||[]).push([[182],{511:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"潜在的异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#潜在的异常"}},[t._v("#")]),t._v(" 潜在的异常")]),t._v(" "),a("p",[t._v("在前后端交互的过程中，难免会遇到一些奇奇怪怪的异常情况，我们需要在开发前先对其进行总结然后再针对每一种异常提出解决方法。\n![[Pasted image 20220616120226.png]]")]),t._v(" "),a("p",[t._v("要处理大量不同类型异常时，可不能每个类单独去"),a("code",[t._v("try...catch")]),t._v("，这很明显不合理。\n最佳的方法是借助AOP思想，将表现层的类进行处理。好在，SpringMVC考虑到了这种情况的发生，因此为我们提供了"),a("code",[t._v("异常处理器")]),t._v("功能")]),t._v(" "),a("p",[t._v("![[Pasted image 20220616142034.png]]")]),t._v(" "),a("h4",{attrs:{id:"项目异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目异常"}},[t._v("#")]),t._v(" 项目异常")]),t._v(" "),a("p",[t._v("上面展示了如何利用AOP思想捕获异常，幸运的是SpringMVC为我们提供了"),a("code",[t._v("异常处理器")]),t._v("，但倘若用户故意输入错误数据，这可怎么办啊。。。")]),t._v(" "),a("p",[t._v("举个例子，\n"),a("code",[t._v("localhost/users/{id}")]),t._v(" 设计只接受整数类型的id，你的前端也配置好了正则表达用来判断数据是否合规，但总有一些人特专业，可能拿着POSTMAN给你发包，由于缺少前端验证，你后端也没预料到这种情况，导致报错了。")])])}),[],!1,null,null,null);a.default=r.exports}}]);