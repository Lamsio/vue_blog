(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{470:function(a,t,r){"use strict";r.r(t);var s=r(4),v=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"生成树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#生成树"}},[a._v("#")]),a._v(" 生成树")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603150943.png",alt:"avatar"}}),a._v(" "),t("img",{attrs:{src:"/more/Pasted%20image%2020220603151123.png",alt:"avatar"}})]),a._v(" "),t("p",[a._v("上面两图可以很容易看到问题所在，当发送源发出一个帧时，交换机会查看目的MAC是否在MAC表中，如果不在就以广播形式泛洪。\nSwitch A泛洪给B，B由于也没有目标的MAC，因此又开始泛洪，帧又回到了A，循环往复，陷入死循环了，这将会耗尽Swtich的所有资源。")]),a._v(" "),t("p",[a._v("如果发生网络十分卡顿，ping包丢失率极高，意味着可能发生了广播风暴")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603151949.png",alt:"avatar"}})]),a._v(" "),t("p",[a._v("另一个问题是多帧复制，A广播后得到目标反馈，因此也有了目标的MAC地址，此时由于延迟原因，B刚收到A发出的广播，由于B没有目标的MAC，因此也会广播，此时目标会再一次收到帧，这意味着明明发送源只发送一次，目标却收到两次请求，而且当A收到B的广播时，会根据自己的MAC表再一次将请求发给目标，这会导致第三次请求。")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603152541.png",alt:"avatar"}}),a._v("\n常见于攻击，由于交换机MAC地址表是有限的，因此攻击者可以持续发送伪装IP的数据包让交换机每次收到都泛洪，从而填满MAC表使其无法添加新的MAC")]),a._v(" "),t("h4",{attrs:{id:"解决环路问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决环路问题"}},[a._v("#")]),a._v(" 解决环路问题")]),a._v(" "),t("p",[a._v("解决环路的最好方法就是断开环路某一路的连接，从而打破闭环（实际情况下不可能总叫一个人蹲在交换机旁边拔线）。生成树协议则恰好能解决这种问题，该协议能够通过特定方式判断该软中断哪一条线路。\n"),t("img",{attrs:{src:"/more/Pasted%20image%2020220603154108.png",alt:"avatar"}})]),a._v(" "),t("h6",{attrs:{id:"选择倒霉鬼"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择倒霉鬼"}},[a._v("#")]),a._v(" 选择倒霉鬼")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603154241.png",alt:"avatar"}})]),a._v(" "),t("p",[a._v("根桥：交换机，这个根桥被称为root")]),a._v(" "),t("p",[a._v("在选取出根桥后，其余交换机都以该根桥作为参考点，然后其余非根桥上选取一个根端口，根端口是根据该交换机距离根桥开销最小的。\n然后在每个段（交换机之间的线路为一段，例如SW1和SW2之间的线路）中选择一个指定端口。\n在上图中SW1-SW3和SW2-SW1的端口都优于SW3->SW2的端口（带宽），因此SW3->SW2会被封禁")]),a._v(" "),t("h6",{attrs:{id:"选择根桥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择根桥"}},[a._v("#")]),a._v(" 选择根桥")]),a._v(" "),t("p",[a._v("STP协议的运行需要依赖于BPDU包泛洪收集相关信息，BPDU中包含了Bridge ID，该ID用于判断交换机能否成为根桥，Bridge ID由两部分组成。\n"),t("img",{attrs:{src:"/more/Pasted%20image%2020220603160556.png",alt:"avatar"}}),a._v(" "),t("strong",[a._v("桥优先级和桥MAC地址都是值越小越优先")]),a._v("\n桥优先级可以人为设定，而桥MAC地址则是无法改变的。会优先比较桥优先级，如果都相同再比较桥MAC地址。Cisco默认优先级是32768")]),a._v(" "),t("h6",{attrs:{id:"选择根端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择根端口"}},[a._v("#")]),a._v(" 选择根端口")]),a._v(" "),t("p",[a._v("非根桥到根桥距离最短的端口")]),a._v(" "),t("h6",{attrs:{id:"选择指定端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择指定端口"}},[a._v("#")]),a._v(" 选择指定端口")]),a._v(" "),t("p",[a._v("具有最低根路径的接口\n考虑因素")]),a._v(" "),t("ol",[t("li",[a._v("最低的根桥ID")]),a._v(" "),t("li",[a._v("最低的根路径代价")]),a._v(" "),t("li",[a._v("最低发送者桥ID")]),a._v(" "),t("li",[a._v("最低端口ID")])]),a._v(" "),t("h6",{attrs:{id:"bpdu"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bpdu"}},[a._v("#")]),a._v(" BPDU")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603160955.png",alt:"avatar"}})]),a._v(" "),t("h6",{attrs:{id:"stp路径开销"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stp路径开销"}},[a._v("#")]),a._v(" STP路径开销")]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603161135.png",alt:"avatar"}})]),a._v(" "),t("h6",{attrs:{id:"练习题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[a._v("#")]),a._v(" 练习题")]),a._v(" "),t("p",[a._v("请标出下图的根桥、根端口、指定端口\n"),t("img",{attrs:{src:"/more/Pasted%20image%2020220603162209.png",alt:"avatar"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"/more/Pasted%20image%2020220603162335.png",alt:"avatar"}}),a._v("\n由于SW2->SW3的MAC更加小，因此是DP")])])}),[],!1,null,null,null);t.default=v.exports}}]);