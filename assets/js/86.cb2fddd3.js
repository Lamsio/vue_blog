(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{415:function(v,_,t){"use strict";t.r(_);var a=t(4),l=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"局部搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#局部搜索"}},[v._v("#")]),v._v(" 局部搜索")]),v._v(" "),_("p",[v._v("只要给出搜索目标即可，不需要记录搜索过程的每个步骤。")]),v._v(" "),_("p",[v._v("常用的局部搜索方式就是在给定的一系列可能目标候选中进行选择，按照某个标准（称为搜索函数search function）挑选具有最大值/最小值的候选作为目标。")]),v._v(" "),_("p",[v._v("常见局部搜索算法：")]),v._v(" "),_("ol",[_("li",[v._v("爬山法")]),v._v(" "),_("li",[v._v("模拟退火算法")]),v._v(" "),_("li",[v._v("禁忌搜索")]),v._v(" "),_("li",[v._v("反应式搜索")])]),v._v(" "),_("h4",{attrs:{id:"爬山法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#爬山法"}},[v._v("#")]),v._v(" 爬山法")]),v._v(" "),_("p",[v._v("当问题规模很大或者很复杂以至于不可能考虑其目标的全部可能性时，以解决寻优问题为目标的优化算法就转变为局部搜索。")]),v._v(" "),_("p",[v._v("优化算法的一些典型例子包括：")]),v._v(" "),_("ol",[_("li",[v._v("图顶点覆盖问题")]),v._v(" "),_("li",[v._v("旅行商问题")])]),v._v(" "),_("p",[v._v("局部搜索最终获得的最优目标通常只是局部最优，因此，局部搜索算法的终止条件一般有2种选择：")]),v._v(" "),_("ol",[_("li",[v._v("时间限制")]),v._v(" "),_("li",[v._v("搜索获得的当前目标不能再改善")])]),v._v(" "),_("p",[v._v("![[Pasted image 20220313173558.png]]")]),v._v(" "),_("p",[v._v("该算法的思想很简单，是一种典型的贪心算法，即从当前状态触发，向相邻状态试探，只要发现某个相邻状态比当前状态好，就转入那个相邻状态，并放弃当前状态。")]),v._v(" "),_("h6",{attrs:{id:"过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#过程"}},[v._v("#")]),v._v(" 过程")]),v._v(" "),_("p",[v._v("局部变量：当前状态节点C，邻居状态节点N")]),v._v(" "),_("ol",[_("li",[v._v("生成问题的初始状态->C;")]),v._v(" "),_("li",[v._v("repeat")]),v._v(" "),_("li",[v._v("生成C的所有后续节点")]),v._v(" "),_("li",[v._v("根据某种标准V，具有最高值的后续节点->N")]),v._v(" "),_("li",[v._v("if V(C) <= V(N), then 返回C退出；## 此时没有找到更好状态")])])])}),[],!1,null,null,null);_.default=l.exports}}]);