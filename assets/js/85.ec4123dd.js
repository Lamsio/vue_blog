(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{413:function(v,_,s){"use strict";s.r(_);var a=s(4),t=Object(a.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"推理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#推理"}},[v._v("#")]),v._v(" 推理")]),v._v(" "),_("ol",[_("li",[v._v("逻辑系统")]),v._v(" "),_("li",[v._v("经典推理方法")]),v._v(" "),_("li",[v._v("概率推理")]),v._v(" "),_("li",[v._v("决策")]),v._v(" "),_("li",[v._v("规划")])]),v._v(" "),_("h6",{attrs:{id:"前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[v._v("#")]),v._v(" 前言")]),v._v(" "),_("p",[v._v("暂未载入以下章节：")]),v._v(" "),_("ol",[_("li",[v._v("知识图谱表示框架")]),v._v(" "),_("li",[v._v("知识图谱应用")]),v._v(" "),_("li",[v._v("知识获取与存储")])]),v._v(" "),_("h4",{attrs:{id:"逻辑系统"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#逻辑系统"}},[v._v("#")]),v._v(" 逻辑系统")]),v._v(" "),_("p",[_("strong",[v._v("推理")]),v._v("（reasoning）也叫逻辑推理（logical reasoning），是人类理性和智能的象征之一，因而也是人工智能领域最重要的一个研究方向，推理是从一个或多个已知的判断推导出新的判断的过程。推理离不开逻辑，因此逻辑系统是基础，即使通过计算选择推理结果，也必须用逻辑来解释。")]),v._v(" "),_("p",[_("strong",[v._v("推理")]),v._v("是根据已有的知识或者信息（数据）导出结论、做出预测或者构造解释，这就对应了三种主要推理类型：")]),v._v(" "),_("ol",[_("li",[v._v("演绎推理（deductive reasoning）")]),v._v(" "),_("li",[v._v("归纳推理（inductive reasoning）")]),v._v(" "),_("li",[v._v("溯因推理（abductive reasoning）")])]),v._v(" "),_("h6",{attrs:{id:"演绎推理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#演绎推理"}},[v._v("#")]),v._v(" 演绎推理")]),v._v(" "),_("p",[v._v("从多个前提（promises）达到一个逻辑结论的过程，即从一般性规则推导出特殊结论，保证结论正确，"),_("strong",[v._v("经典推理方法")]),v._v("属于演绎推理")]),v._v(" "),_("p",[v._v("例子：当下雨时，外面的东西会湿；草坪在外面，因此下雨时草坪也会湿。")]),v._v(" "),_("h6",{attrs:{id:"归纳推理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#归纳推理"}},[v._v("#")]),v._v(" 归纳推理")]),v._v(" "),_("p",[v._v("从一定量的个别观察总结出规律（从个别到一般），虽然结论可能令人信服，但不保证结论正确，从数据中抽象出规律，从这个角度说，机器学习属于归纳推理的范畴。")]),v._v(" "),_("p",[v._v("例子：有许多次下雨时草坪湿了，因此下雨时草坪总是湿的。")]),v._v(" "),_("h6",{attrs:{id:"溯因推理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#溯因推理"}},[v._v("#")]),v._v(" 溯因推理")]),v._v(" "),_("p",[v._v("从不完全的观察集合推导出关于这些观察的最可能的解释，与演绎推理或者归纳推理不同，溯因推理过程需要创见和直觉。"),_("strong",[v._v("贝叶斯网络")]),v._v("的推理就属于这一类。")]),v._v(" "),_("p",[v._v("溯因推理：当下雨时，草坪湿了，现在草坪是湿的，因此一定下过雨。")]),v._v(" "),_("h6",{attrs:{id:"命题逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#命题逻辑"}},[v._v("#")]),v._v(" 命题逻辑")]),v._v(" "),_("p",[_("strong",[v._v("命题")]),v._v("是一个描述客观世界的可区分真假的陈述句，即一个二值（T / F）")]),v._v(" "),_("p",[v._v("如：2+2 = 4 (T)")]),v._v(" "),_("p",[v._v("反例: A比B聪明，蛋糕真好吃... （这属于主观判断）")]),v._v(" "),_("p",[_("strong",[v._v("命题")]),v._v("具有真假值，用T / F表示")]),v._v(" "),_("p",[v._v("真值连接词有五个：")]),v._v(" "),_("ol",[_("li",[v._v("¬ : 否定")]),v._v(" "),_("li",[v._v("∧ : 合取")]),v._v(" "),_("li",[v._v("∨ : 析取")]),v._v(" "),_("li",[v._v("→ : 蕴含")]),v._v(" "),_("li",[v._v("≡ : 等价")])]),v._v(" "),_("p",[v._v("使用连接词以后的命题称为"),_("strong",[v._v("复合命题")])]),v._v(" "),_("h6",{attrs:{id:"谓词逻辑"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#谓词逻辑"}},[v._v("#")]),v._v(" 谓词逻辑")]),v._v(" "),_("p",[_("strong",[v._v("谓词")]),v._v("是用于说明个体的性质或者个体之间关系的形式符号")]),v._v(" "),_("p",[_("strong",[v._v("谓词")]),v._v("可看作是从个体域或者个体域的笛卡尔乘积到真值集合的映射")]),v._v(" "),_("p",[v._v("例如：人都会死，可以写为"),_("code",[v._v("M(x)->D(x)")]),v._v("，其个体域是人，给定了论域，就是确定了谓词的真假值")]),v._v(" "),_("p",[v._v("通常一元谓词用于表述个体的性质，如"),_("code",[v._v("人会死亡")]),v._v("记为"),_("code",[v._v("D(x)")]),v._v("，表示任意一个人x，使得一元谓词D(x)为真")]),v._v(" "),_("p",[v._v("二元谓词或者多元谓词表示个体之间的关系，如二元谓词"),_("code",[v._v("Win(x,y)")]),v._v("代入x=中国队, y=蒙古队，即句子"),_("code",[v._v("中国队战胜了蒙古队")]),v._v("表示为"),_("code",[v._v("Win(中国队, 蒙古队)")])]),v._v(" "),_("h6",{attrs:{id:"量词"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[v._v("#")]),v._v(" 量词")]),v._v(" "),_("p",[_("strong",[v._v("量词")]),v._v("用来表示谓词的判断特性; 全称量词∀: 对所有的x，∀xP(x); 存在量词∃: 存在x, ∃xP(x)")]),v._v(" "),_("p",[v._v("带有全称变量∀x的公式，表示形式为∀x(P(x)->...)\n带有存在变量∃x的公式，表示形式为∃x(P(x)∧...)")]),v._v(" "),_("p",[v._v("例如：\n所有的有理数都是实数，∀x(P(x)->R(x))\n有些人身高超过两米，∃x(P(x)∧G(x))")]),v._v(" "),_("p",[v._v("这种使用方法不可改变，否则会造成逻辑错误。")]),v._v(" "),_("h6",{attrs:{id:"约束变量"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#约束变量"}},[v._v("#")]),v._v(" 约束变量")]),v._v(" "),_("p",[_("strong",[v._v("约束变量")]),v._v("是∀、∃中x的变量，量词管辖的公式如P(x)称为量词辖域; 不存在量词辖域内的变量为自由变量")]),v._v(" "),_("h6",{attrs:{id:"函数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[v._v("#")]),v._v(" 函数")]),v._v(" "),_("p",[_("strong",[v._v("函数")]),v._v("用于表示个体之间的运算，可作用于一个或多个个体，给定一个或多个个体，产生于给新的个体，函数用小写字母表示，函数中的变量的个数称为函数的元数。")]),v._v(" "),_("p",[v._v("例如: x的父亲，记为father(x)，两数之和仍然是一个数字，记为add(e1,e2)")]),v._v(" "),_("h6",{attrs:{id:"谓词与函数区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#谓词与函数区别"}},[v._v("#")]),v._v(" 谓词与函数区别")]),v._v(" "),_("p",[v._v("谓词代表语句（关系），结果为真假值\n函数代表运算（关系运算），结果是一个新个体")]),v._v(" "),_("p",[v._v("例如：谓词Sum(e1,e2,e3)，说明e1,e2,e3之间的关系是e3是e1与e2之和（如果确实是，则为真，否则为假）; 而函数add(e1,e2)说明e1与e2相加的结果仍然是一个数")]),v._v(" "),_("h4",{attrs:{id:"经典推理方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#经典推理方法"}},[v._v("#")]),v._v(" 经典推理方法")]),v._v(" "),_("p",[v._v("介绍基本的推理运算 —— 置换与合一\n给定了一般的推理规则，根据具体条件需要在规则中带入具体事实，这就是"),_("strong",[v._v("置换")]),v._v("，推理的结论用某一具体谓词公式表示，推理过程最终需要与结论相同。相应的就有"),_("strong",[v._v("合一运算")])]),v._v(" "),_("h6",{attrs:{id:"置换与合一"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#置换与合一"}},[v._v("#")]),v._v(" 置换与合一")]),v._v(" "),_("p",[_("strong",[v._v("文字(literal)")]),v._v(" : 正负原子公式，前面有否定连接词的谓词公式是负原子公式，否则就是正原子公式。\n"),_("strong",[v._v("子句(clause)")]),v._v(": 仅使用析取连接词将原子公式连接后的公式，或称为文字的析取式。\n"),_("strong",[v._v("Horn子句(Horn clause)")]),v._v(" : 至多有一个正文字的子句，例如"),_("code",[v._v("¬A V ¬B V ¬C V D")]),v._v("其中正文字称为Horn子句头，其他称为子句体。")]),v._v(" "),_("p",[_("strong",[v._v("置换(substitution)")]),v._v(" : 设x1 ~ xn 是n个变量且各不相同，t1 ~ tn 是n个项(常量、变量、函数), ti != xi，则用"),_("code",[v._v("ti")]),v._v("替换变量"),_("code",[v._v("xi")]),v._v("操作形成的有限序列{x1/t1, ..., xn/tn}称为一个置换(运算)")]),v._v(" "),_("p",[_("strong",[v._v("合一置换")]),v._v("，通过相关置换使不同的一阶谓词公式成为相同的过程。\n如: "),_("code",[v._v("Unify(Know(Tommy,x), Know(Tommy, Katlin)) = {x/Katlin}")])]),v._v(" "),_("p",[v._v("但，"),_("code",[v._v("Unify(K(Tommy,x),K(x,Jane)) = Fail")]),v._v("，因为x不能同时为两个值。")]),v._v(" "),_("h6",{attrs:{id:"正向推理方法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#正向推理方法"}},[v._v("#")]),v._v(" 正向推理方法")]),v._v(" "),_("ol",[_("li",[v._v("通过已知事实即知识库中的原子公式开始，依次对知识库中的推理规则进行置换，检查规则前提部分的文字是否全部与知识库中的事实相匹配。")]),v._v(" "),_("li",[v._v("如果匹配则把该条规则已经做过置换的结论部分添加到知识库中，如果这个结论和需要推导出的结论一致，则推理结束，结论获得证明。")]),v._v(" "),_("li",[v._v("否则回到(1)，直至获得证明; 或者在没有新的事实加入，此时推理以证明失败结束。")])]),v._v(" "),_("p",[v._v("输入: 知识库KB - 有限子句集合，待证结论α - 原子公式\n输出: 置换(证明成功) 或者FAIL(证明失败)")]),v._v(" "),_("div",{staticClass:"language-text line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[v._v("美国法律规定，美国人卖武器给敌对国家是犯罪的; 美国的敌国Nono有一些道道，所有这些导弹都是West上校卖给他们的，而West上校是个美国人。\n\n首先用子句表达每个句子，形成知识库KB：\n1. 美国人卖武器给敌对国家是犯罪的\nAmerican(x) ∧ Weapon(y) ∧ Sell(x,y,z) ∧ Hostile(z) -> Criminal(x)\n2. Nono有一些导弹\n∃xOwn(Nono,x) ∧ Missile(x)\n\n消去存在量词，引入新常量，得到2个原子公式\n3. Own(Nono, M1);\n4. Missile(M1);\n5. 所有该国导弹都是West上校出售的\nMissile(y) ∧ Own(Nono, y) -> Sell(West, y, Nono);\n6. 导弹是武器: Missile(y) -> Weapon(y);\n7. 其他陈述: \n\tAmerican(West)\n\tHOSTILE(Nono);\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br"),_("span",{staticClass:"line-number"},[v._v("4")]),_("br"),_("span",{staticClass:"line-number"},[v._v("5")]),_("br"),_("span",{staticClass:"line-number"},[v._v("6")]),_("br"),_("span",{staticClass:"line-number"},[v._v("7")]),_("br"),_("span",{staticClass:"line-number"},[v._v("8")]),_("br"),_("span",{staticClass:"line-number"},[v._v("9")]),_("br"),_("span",{staticClass:"line-number"},[v._v("10")]),_("br"),_("span",{staticClass:"line-number"},[v._v("11")]),_("br"),_("span",{staticClass:"line-number"},[v._v("12")]),_("br"),_("span",{staticClass:"line-number"},[v._v("13")]),_("br"),_("span",{staticClass:"line-number"},[v._v("14")]),_("br"),_("span",{staticClass:"line-number"},[v._v("15")]),_("br"),_("span",{staticClass:"line-number"},[v._v("16")]),_("br"),_("span",{staticClass:"line-number"},[v._v("17")]),_("br")])])])}),[],!1,null,null,null);_.default=t.exports}}]);